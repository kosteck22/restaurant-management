/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example.kafka.stock.take.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StockItem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6764065032918814969L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockItem\",\"namespace\":\"org.example.kafka.stock.take.avro.model\",\"fields\":[{\"name\":\"stockTakeId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"StockItemId\",\"type\":\"long\"},{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"quantity\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":3}},{\"name\":\"grossPrice\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"totalGrossPrice\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2}},{\"name\":\"invoiceId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<StockItem> ENCODER =
      new BinaryMessageEncoder<StockItem>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockItem> DECODER =
      new BinaryMessageDecoder<StockItem>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StockItem> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StockItem> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StockItem> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StockItem>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StockItem to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StockItem from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StockItem instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StockItem fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String stockTakeId;
  private long StockItemId;
  private java.lang.String productId;
  private java.lang.String name;
  private java.math.BigDecimal quantity;
  private java.math.BigDecimal grossPrice;
  private java.math.BigDecimal totalGrossPrice;
  private java.lang.String invoiceId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockItem() {}

  /**
   * All-args constructor.
   * @param stockTakeId The new value for stockTakeId
   * @param StockItemId The new value for StockItemId
   * @param productId The new value for productId
   * @param name The new value for name
   * @param quantity The new value for quantity
   * @param grossPrice The new value for grossPrice
   * @param totalGrossPrice The new value for totalGrossPrice
   * @param invoiceId The new value for invoiceId
   */
  public StockItem(java.lang.String stockTakeId, java.lang.Long StockItemId, java.lang.String productId, java.lang.String name, java.math.BigDecimal quantity, java.math.BigDecimal grossPrice, java.math.BigDecimal totalGrossPrice, java.lang.String invoiceId) {
    this.stockTakeId = stockTakeId;
    this.StockItemId = StockItemId;
    this.productId = productId;
    this.name = name;
    this.quantity = quantity;
    this.grossPrice = grossPrice;
    this.totalGrossPrice = totalGrossPrice;
    this.invoiceId = invoiceId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return stockTakeId;
    case 1: return StockItemId;
    case 2: return productId;
    case 3: return name;
    case 4: return quantity;
    case 5: return grossPrice;
    case 6: return totalGrossPrice;
    case 7: return invoiceId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      new org.apache.avro.Conversions.DecimalConversion(),
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: stockTakeId = value$ != null ? value$.toString() : null; break;
    case 1: StockItemId = (java.lang.Long)value$; break;
    case 2: productId = value$ != null ? value$.toString() : null; break;
    case 3: name = value$ != null ? value$.toString() : null; break;
    case 4: quantity = (java.math.BigDecimal)value$; break;
    case 5: grossPrice = (java.math.BigDecimal)value$; break;
    case 6: totalGrossPrice = (java.math.BigDecimal)value$; break;
    case 7: invoiceId = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'stockTakeId' field.
   * @return The value of the 'stockTakeId' field.
   */
  public java.lang.String getStockTakeId() {
    return stockTakeId;
  }


  /**
   * Sets the value of the 'stockTakeId' field.
   * @param value the value to set.
   */
  public void setStockTakeId(java.lang.String value) {
    this.stockTakeId = value;
  }

  /**
   * Gets the value of the 'StockItemId' field.
   * @return The value of the 'StockItemId' field.
   */
  public long getStockItemId() {
    return StockItemId;
  }


  /**
   * Sets the value of the 'StockItemId' field.
   * @param value the value to set.
   */
  public void setStockItemId(long value) {
    this.StockItemId = value;
  }

  /**
   * Gets the value of the 'productId' field.
   * @return The value of the 'productId' field.
   */
  public java.lang.String getProductId() {
    return productId;
  }


  /**
   * Sets the value of the 'productId' field.
   * @param value the value to set.
   */
  public void setProductId(java.lang.String value) {
    this.productId = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public java.math.BigDecimal getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(java.math.BigDecimal value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'grossPrice' field.
   * @return The value of the 'grossPrice' field.
   */
  public java.math.BigDecimal getGrossPrice() {
    return grossPrice;
  }


  /**
   * Sets the value of the 'grossPrice' field.
   * @param value the value to set.
   */
  public void setGrossPrice(java.math.BigDecimal value) {
    this.grossPrice = value;
  }

  /**
   * Gets the value of the 'totalGrossPrice' field.
   * @return The value of the 'totalGrossPrice' field.
   */
  public java.math.BigDecimal getTotalGrossPrice() {
    return totalGrossPrice;
  }


  /**
   * Sets the value of the 'totalGrossPrice' field.
   * @param value the value to set.
   */
  public void setTotalGrossPrice(java.math.BigDecimal value) {
    this.totalGrossPrice = value;
  }

  /**
   * Gets the value of the 'invoiceId' field.
   * @return The value of the 'invoiceId' field.
   */
  public java.lang.String getInvoiceId() {
    return invoiceId;
  }


  /**
   * Sets the value of the 'invoiceId' field.
   * @param value the value to set.
   */
  public void setInvoiceId(java.lang.String value) {
    this.invoiceId = value;
  }

  /**
   * Creates a new StockItem RecordBuilder.
   * @return A new StockItem RecordBuilder
   */
  public static org.example.kafka.stock.take.avro.model.StockItem.Builder newBuilder() {
    return new org.example.kafka.stock.take.avro.model.StockItem.Builder();
  }

  /**
   * Creates a new StockItem RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockItem RecordBuilder
   */
  public static org.example.kafka.stock.take.avro.model.StockItem.Builder newBuilder(org.example.kafka.stock.take.avro.model.StockItem.Builder other) {
    if (other == null) {
      return new org.example.kafka.stock.take.avro.model.StockItem.Builder();
    } else {
      return new org.example.kafka.stock.take.avro.model.StockItem.Builder(other);
    }
  }

  /**
   * Creates a new StockItem RecordBuilder by copying an existing StockItem instance.
   * @param other The existing instance to copy.
   * @return A new StockItem RecordBuilder
   */
  public static org.example.kafka.stock.take.avro.model.StockItem.Builder newBuilder(org.example.kafka.stock.take.avro.model.StockItem other) {
    if (other == null) {
      return new org.example.kafka.stock.take.avro.model.StockItem.Builder();
    } else {
      return new org.example.kafka.stock.take.avro.model.StockItem.Builder(other);
    }
  }

  /**
   * RecordBuilder for StockItem instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockItem>
    implements org.apache.avro.data.RecordBuilder<StockItem> {

    private java.lang.String stockTakeId;
    private long StockItemId;
    private java.lang.String productId;
    private java.lang.String name;
    private java.math.BigDecimal quantity;
    private java.math.BigDecimal grossPrice;
    private java.math.BigDecimal totalGrossPrice;
    private java.lang.String invoiceId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.kafka.stock.take.avro.model.StockItem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stockTakeId)) {
        this.stockTakeId = data().deepCopy(fields()[0].schema(), other.stockTakeId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.StockItemId)) {
        this.StockItemId = data().deepCopy(fields()[1].schema(), other.StockItemId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.productId)) {
        this.productId = data().deepCopy(fields()[2].schema(), other.productId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.quantity)) {
        this.quantity = data().deepCopy(fields()[4].schema(), other.quantity);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.grossPrice)) {
        this.grossPrice = data().deepCopy(fields()[5].schema(), other.grossPrice);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.totalGrossPrice)) {
        this.totalGrossPrice = data().deepCopy(fields()[6].schema(), other.totalGrossPrice);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.invoiceId)) {
        this.invoiceId = data().deepCopy(fields()[7].schema(), other.invoiceId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing StockItem instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.kafka.stock.take.avro.model.StockItem other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.stockTakeId)) {
        this.stockTakeId = data().deepCopy(fields()[0].schema(), other.stockTakeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.StockItemId)) {
        this.StockItemId = data().deepCopy(fields()[1].schema(), other.StockItemId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.productId)) {
        this.productId = data().deepCopy(fields()[2].schema(), other.productId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.quantity)) {
        this.quantity = data().deepCopy(fields()[4].schema(), other.quantity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.grossPrice)) {
        this.grossPrice = data().deepCopy(fields()[5].schema(), other.grossPrice);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.totalGrossPrice)) {
        this.totalGrossPrice = data().deepCopy(fields()[6].schema(), other.totalGrossPrice);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.invoiceId)) {
        this.invoiceId = data().deepCopy(fields()[7].schema(), other.invoiceId);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'stockTakeId' field.
      * @return The value.
      */
    public java.lang.String getStockTakeId() {
      return stockTakeId;
    }


    /**
      * Sets the value of the 'stockTakeId' field.
      * @param value The value of 'stockTakeId'.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder setStockTakeId(java.lang.String value) {
      validate(fields()[0], value);
      this.stockTakeId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stockTakeId' field has been set.
      * @return True if the 'stockTakeId' field has been set, false otherwise.
      */
    public boolean hasStockTakeId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stockTakeId' field.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder clearStockTakeId() {
      stockTakeId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'StockItemId' field.
      * @return The value.
      */
    public long getStockItemId() {
      return StockItemId;
    }


    /**
      * Sets the value of the 'StockItemId' field.
      * @param value The value of 'StockItemId'.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder setStockItemId(long value) {
      validate(fields()[1], value);
      this.StockItemId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'StockItemId' field has been set.
      * @return True if the 'StockItemId' field has been set, false otherwise.
      */
    public boolean hasStockItemId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'StockItemId' field.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder clearStockItemId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId' field.
      * @return The value.
      */
    public java.lang.String getProductId() {
      return productId;
    }


    /**
      * Sets the value of the 'productId' field.
      * @param value The value of 'productId'.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder setProductId(java.lang.String value) {
      validate(fields()[2], value);
      this.productId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'productId' field has been set.
      * @return True if the 'productId' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'productId' field.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder clearProductId() {
      productId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder setName(java.lang.String value) {
      validate(fields()[3], value);
      this.name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder clearName() {
      name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public java.math.BigDecimal getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder setQuantity(java.math.BigDecimal value) {
      validate(fields()[4], value);
      this.quantity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder clearQuantity() {
      quantity = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'grossPrice' field.
      * @return The value.
      */
    public java.math.BigDecimal getGrossPrice() {
      return grossPrice;
    }


    /**
      * Sets the value of the 'grossPrice' field.
      * @param value The value of 'grossPrice'.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder setGrossPrice(java.math.BigDecimal value) {
      validate(fields()[5], value);
      this.grossPrice = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'grossPrice' field has been set.
      * @return True if the 'grossPrice' field has been set, false otherwise.
      */
    public boolean hasGrossPrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'grossPrice' field.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder clearGrossPrice() {
      grossPrice = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalGrossPrice' field.
      * @return The value.
      */
    public java.math.BigDecimal getTotalGrossPrice() {
      return totalGrossPrice;
    }


    /**
      * Sets the value of the 'totalGrossPrice' field.
      * @param value The value of 'totalGrossPrice'.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder setTotalGrossPrice(java.math.BigDecimal value) {
      validate(fields()[6], value);
      this.totalGrossPrice = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'totalGrossPrice' field has been set.
      * @return True if the 'totalGrossPrice' field has been set, false otherwise.
      */
    public boolean hasTotalGrossPrice() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'totalGrossPrice' field.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder clearTotalGrossPrice() {
      totalGrossPrice = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'invoiceId' field.
      * @return The value.
      */
    public java.lang.String getInvoiceId() {
      return invoiceId;
    }


    /**
      * Sets the value of the 'invoiceId' field.
      * @param value The value of 'invoiceId'.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder setInvoiceId(java.lang.String value) {
      validate(fields()[7], value);
      this.invoiceId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'invoiceId' field has been set.
      * @return True if the 'invoiceId' field has been set, false otherwise.
      */
    public boolean hasInvoiceId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'invoiceId' field.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockItem.Builder clearInvoiceId() {
      invoiceId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockItem build() {
      try {
        StockItem record = new StockItem();
        record.stockTakeId = fieldSetFlags()[0] ? this.stockTakeId : (java.lang.String) defaultValue(fields()[0]);
        record.StockItemId = fieldSetFlags()[1] ? this.StockItemId : (java.lang.Long) defaultValue(fields()[1]);
        record.productId = fieldSetFlags()[2] ? this.productId : (java.lang.String) defaultValue(fields()[2]);
        record.name = fieldSetFlags()[3] ? this.name : (java.lang.String) defaultValue(fields()[3]);
        record.quantity = fieldSetFlags()[4] ? this.quantity : (java.math.BigDecimal) defaultValue(fields()[4]);
        record.grossPrice = fieldSetFlags()[5] ? this.grossPrice : (java.math.BigDecimal) defaultValue(fields()[5]);
        record.totalGrossPrice = fieldSetFlags()[6] ? this.totalGrossPrice : (java.math.BigDecimal) defaultValue(fields()[6]);
        record.invoiceId = fieldSetFlags()[7] ? this.invoiceId : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockItem>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockItem>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockItem>
    READER$ = (org.apache.avro.io.DatumReader<StockItem>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










