/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example.kafka.stock.take.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StockUpdateRequestAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7042093899178843478L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockUpdateRequestAvroModel\",\"namespace\":\"org.example.kafka.stock.take.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"sagaId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"stockTakeId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"preparedDate\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"items\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"StockItem\",\"fields\":[{\"name\":\"stockTakeId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"StockItemId\",\"type\":\"long\"},{\"name\":\"productId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"quantity\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":3}}]}}},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"StockTakeStatus\",\"symbols\":[\"PENDING\",\"REJECTED\",\"ACCEPTED\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<StockUpdateRequestAvroModel> ENCODER =
      new BinaryMessageEncoder<StockUpdateRequestAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockUpdateRequestAvroModel> DECODER =
      new BinaryMessageDecoder<StockUpdateRequestAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StockUpdateRequestAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StockUpdateRequestAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StockUpdateRequestAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StockUpdateRequestAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StockUpdateRequestAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StockUpdateRequestAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StockUpdateRequestAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StockUpdateRequestAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private java.lang.String sagaId;
  private java.time.Instant createdAt;
  private java.lang.String stockTakeId;
  private java.time.Instant preparedDate;
  private java.util.List<org.example.kafka.stock.take.avro.model.StockItem> items;
  private org.example.kafka.stock.take.avro.model.StockTakeStatus status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockUpdateRequestAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param sagaId The new value for sagaId
   * @param createdAt The new value for createdAt
   * @param stockTakeId The new value for stockTakeId
   * @param preparedDate The new value for preparedDate
   * @param items The new value for items
   * @param status The new value for status
   */
  public StockUpdateRequestAvroModel(java.lang.String id, java.lang.String sagaId, java.time.Instant createdAt, java.lang.String stockTakeId, java.time.Instant preparedDate, java.util.List<org.example.kafka.stock.take.avro.model.StockItem> items, org.example.kafka.stock.take.avro.model.StockTakeStatus status) {
    this.id = id;
    this.sagaId = sagaId;
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.stockTakeId = stockTakeId;
    this.preparedDate = preparedDate.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.items = items;
    this.status = status;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return sagaId;
    case 2: return createdAt;
    case 3: return stockTakeId;
    case 4: return preparedDate;
    case 5: return items;
    case 6: return status;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: sagaId = value$ != null ? value$.toString() : null; break;
    case 2: createdAt = (java.time.Instant)value$; break;
    case 3: stockTakeId = value$ != null ? value$.toString() : null; break;
    case 4: preparedDate = (java.time.Instant)value$; break;
    case 5: items = (java.util.List<org.example.kafka.stock.take.avro.model.StockItem>)value$; break;
    case 6: status = (org.example.kafka.stock.take.avro.model.StockTakeStatus)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'sagaId' field.
   * @return The value of the 'sagaId' field.
   */
  public java.lang.String getSagaId() {
    return sagaId;
  }


  /**
   * Sets the value of the 'sagaId' field.
   * @param value the value to set.
   */
  public void setSagaId(java.lang.String value) {
    this.sagaId = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.time.Instant value) {
    this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'stockTakeId' field.
   * @return The value of the 'stockTakeId' field.
   */
  public java.lang.String getStockTakeId() {
    return stockTakeId;
  }


  /**
   * Sets the value of the 'stockTakeId' field.
   * @param value the value to set.
   */
  public void setStockTakeId(java.lang.String value) {
    this.stockTakeId = value;
  }

  /**
   * Gets the value of the 'preparedDate' field.
   * @return The value of the 'preparedDate' field.
   */
  public java.time.Instant getPreparedDate() {
    return preparedDate;
  }


  /**
   * Sets the value of the 'preparedDate' field.
   * @param value the value to set.
   */
  public void setPreparedDate(java.time.Instant value) {
    this.preparedDate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'items' field.
   * @return The value of the 'items' field.
   */
  public java.util.List<org.example.kafka.stock.take.avro.model.StockItem> getItems() {
    return items;
  }


  /**
   * Sets the value of the 'items' field.
   * @param value the value to set.
   */
  public void setItems(java.util.List<org.example.kafka.stock.take.avro.model.StockItem> value) {
    this.items = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public org.example.kafka.stock.take.avro.model.StockTakeStatus getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(org.example.kafka.stock.take.avro.model.StockTakeStatus value) {
    this.status = value;
  }

  /**
   * Creates a new StockUpdateRequestAvroModel RecordBuilder.
   * @return A new StockUpdateRequestAvroModel RecordBuilder
   */
  public static org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder newBuilder() {
    return new org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder();
  }

  /**
   * Creates a new StockUpdateRequestAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockUpdateRequestAvroModel RecordBuilder
   */
  public static org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder newBuilder(org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder other) {
    if (other == null) {
      return new org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder();
    } else {
      return new org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new StockUpdateRequestAvroModel RecordBuilder by copying an existing StockUpdateRequestAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new StockUpdateRequestAvroModel RecordBuilder
   */
  public static org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder newBuilder(org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel other) {
    if (other == null) {
      return new org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder();
    } else {
      return new org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for StockUpdateRequestAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockUpdateRequestAvroModel>
    implements org.apache.avro.data.RecordBuilder<StockUpdateRequestAvroModel> {

    private java.lang.String id;
    private java.lang.String sagaId;
    private java.time.Instant createdAt;
    private java.lang.String stockTakeId;
    private java.time.Instant preparedDate;
    private java.util.List<org.example.kafka.stock.take.avro.model.StockItem> items;
    private org.example.kafka.stock.take.avro.model.StockTakeStatus status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[1].schema(), other.sagaId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[2].schema(), other.createdAt);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.stockTakeId)) {
        this.stockTakeId = data().deepCopy(fields()[3].schema(), other.stockTakeId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.preparedDate)) {
        this.preparedDate = data().deepCopy(fields()[4].schema(), other.preparedDate);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.items)) {
        this.items = data().deepCopy(fields()[5].schema(), other.items);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing StockUpdateRequestAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sagaId)) {
        this.sagaId = data().deepCopy(fields()[1].schema(), other.sagaId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[2].schema(), other.createdAt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.stockTakeId)) {
        this.stockTakeId = data().deepCopy(fields()[3].schema(), other.stockTakeId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.preparedDate)) {
        this.preparedDate = data().deepCopy(fields()[4].schema(), other.preparedDate);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.items)) {
        this.items = data().deepCopy(fields()[5].schema(), other.items);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.status)) {
        this.status = data().deepCopy(fields()[6].schema(), other.status);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sagaId' field.
      * @return The value.
      */
    public java.lang.String getSagaId() {
      return sagaId;
    }


    /**
      * Sets the value of the 'sagaId' field.
      * @param value The value of 'sagaId'.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder setSagaId(java.lang.String value) {
      validate(fields()[1], value);
      this.sagaId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sagaId' field has been set.
      * @return True if the 'sagaId' field has been set, false otherwise.
      */
    public boolean hasSagaId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sagaId' field.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder clearSagaId() {
      sagaId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[2], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder clearCreatedAt() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'stockTakeId' field.
      * @return The value.
      */
    public java.lang.String getStockTakeId() {
      return stockTakeId;
    }


    /**
      * Sets the value of the 'stockTakeId' field.
      * @param value The value of 'stockTakeId'.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder setStockTakeId(java.lang.String value) {
      validate(fields()[3], value);
      this.stockTakeId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'stockTakeId' field has been set.
      * @return True if the 'stockTakeId' field has been set, false otherwise.
      */
    public boolean hasStockTakeId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'stockTakeId' field.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder clearStockTakeId() {
      stockTakeId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'preparedDate' field.
      * @return The value.
      */
    public java.time.Instant getPreparedDate() {
      return preparedDate;
    }


    /**
      * Sets the value of the 'preparedDate' field.
      * @param value The value of 'preparedDate'.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder setPreparedDate(java.time.Instant value) {
      validate(fields()[4], value);
      this.preparedDate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'preparedDate' field has been set.
      * @return True if the 'preparedDate' field has been set, false otherwise.
      */
    public boolean hasPreparedDate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'preparedDate' field.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder clearPreparedDate() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'items' field.
      * @return The value.
      */
    public java.util.List<org.example.kafka.stock.take.avro.model.StockItem> getItems() {
      return items;
    }


    /**
      * Sets the value of the 'items' field.
      * @param value The value of 'items'.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder setItems(java.util.List<org.example.kafka.stock.take.avro.model.StockItem> value) {
      validate(fields()[5], value);
      this.items = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'items' field has been set.
      * @return True if the 'items' field has been set, false otherwise.
      */
    public boolean hasItems() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'items' field.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder clearItems() {
      items = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public org.example.kafka.stock.take.avro.model.StockTakeStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder setStatus(org.example.kafka.stock.take.avro.model.StockTakeStatus value) {
      validate(fields()[6], value);
      this.status = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public org.example.kafka.stock.take.avro.model.StockUpdateRequestAvroModel.Builder clearStatus() {
      status = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockUpdateRequestAvroModel build() {
      try {
        StockUpdateRequestAvroModel record = new StockUpdateRequestAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.sagaId = fieldSetFlags()[1] ? this.sagaId : (java.lang.String) defaultValue(fields()[1]);
        record.createdAt = fieldSetFlags()[2] ? this.createdAt : (java.time.Instant) defaultValue(fields()[2]);
        record.stockTakeId = fieldSetFlags()[3] ? this.stockTakeId : (java.lang.String) defaultValue(fields()[3]);
        record.preparedDate = fieldSetFlags()[4] ? this.preparedDate : (java.time.Instant) defaultValue(fields()[4]);
        record.items = fieldSetFlags()[5] ? this.items : (java.util.List<org.example.kafka.stock.take.avro.model.StockItem>) defaultValue(fields()[5]);
        record.status = fieldSetFlags()[6] ? this.status : (org.example.kafka.stock.take.avro.model.StockTakeStatus) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockUpdateRequestAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockUpdateRequestAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockUpdateRequestAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<StockUpdateRequestAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










